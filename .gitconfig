[user]
	name = R. Scott Hosley
	email = hosley@users.noreply.github.com
[push]
    autoSetupRemote = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[core]
	excludesfile = ~/.gitignore
	filemode = false
	editor = idea -n -w
[status]
	aheadBehind = true
	branch = true
	short = true
	showStash = true
	showUntrackedFiles = all
[diff]
	colorMoved = true
	algorithm = histogram
	tool = default-difftool
[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
[init]
	defaultBranch = main
[rebase]
	autosquash = true
	autostash = true
	updateRefs = true
[rerere]
	enabled = true
	autoupdate = true
[merge]
	conflictstyle = zdiff3
	tool = code
	keepbackup = false
[mergetool "code"]
    cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED
[mergetool "intellij"]
	cmd = idea merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
	trustExitCode = true
[fetch]
	prune = true
[grep]
	linenumber = true
[color]
	ui = auto
[help]
	autocorrect = prompt
[branch]
	sort = -committerdate
[alias]
	squash-branch = "!f() { \\\n  base=$(git merge-base origin/HEAD HEAD); \\\n  msg=$(git log \"$base\"..HEAD --reverse --pretty=format:%s | head -n1); \\\n  git reset --soft \"$base\" && git commit -m \"$msg\"; \\\n}; f"
	stash-save = "!f() { \\\n  if [ -z \"$1\" ]; then \\\n    echo \"Usage: git stash-name \\\"Your stash message\\\"\" >&2; \\\n    exit 1; \\\n  fi; \\\n  git stash push -m \"$1\"; \\\n}; f"
	stash-fetch = "!f() { \\\n  match=\"$1\"; \\\n  stash=$(git stash list | grep \"$match\" | head -n1 | cut -d: -f1); \\\n  if [ -n \"$stash\" ]; then \\\n    git stash apply \"$stash\"; \\\n  else \\\n    echo \"No stash matching \\\"$match\\\" found.\" >&2; \\\n    exit 1; \\\n  fi; \\\n}; f"
